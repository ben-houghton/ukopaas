{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseResourceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource"
      },
      "maxLength": 15
    },
    "environments": {
      "defaultValue": [
        "Dev",
        "QA",
        "UAT",
        "Preview"
      ],
      "type": "array",
      "metadata": {
        "description": "Array with the names for the environment slots"
      },
      "maxLength": 19
    },
    "transparentDataEncryption": {
        "type": "string",
        "allowedValues": [
          "Enabled",
          "Disabled"
        ],
        "defaultValue": "Enabled",
        "metadata": {
          "description": "Enable or disable Transparent Data Encryption (TDE) for the database."
        }
      },
      "AuditRetentionPeriodInDays": {
        "type": "int",
        "defaultValue": 7
      },
    "sqlServerAdminLogin": {
        "type": "string",
        "metadata": {
            "description": "The username for administering the SQL Server"
        }
    },
    "sqlServerAdminPassword": {
        "type": "string",
        "metadata": {
            "description": "The password for administering the SQL Server"
        }
    },
    "sqlDatabaseEdition": {
        "type": "string",
        "metadata": {
          "description": "The type of database to create."
        },
        "allowedValues": [
          "Basic",
          "Standard",
          "Premium"
        ]
      },
      "sqlDatabaseCollation": {
        "type": "string",
        "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
        "metadata": {
          "description": "The database collation for governing the proper use of characters."
        }
      },
      "sqlDatabaseMaxSizeBytes": {
        "type": "string",
        "defaultValue": "1073741824",
        "metadata": {
          "description": "The maximum size, in bytes, for the database"
        }
      },
      "AAD Admin Login": {
          "type": "string",
          "metadata": {
              "description": "The Login Name for the Azure Active Directory user to be a server admin"
          }
      },
      "AAD Admin ObjectID": {
        "type": "string",
        "metadata": {
            "description": "The Object ID for the Azure Active Directory user to be a server admin"
        }
    },
    "AlertWindowSizeInMinutes": {
      "type": "string",
      "metadata": {
        "description": "Window size used for alerts in minutes"
      },
      "defaultValue": "5"
    },
    "AlertSendToServiceOwners": {
      "type": "bool",
      "metadata": {
        "description": "Should the alerts be sent to the service owners?"
      },
      "defaultValue": true  
    },
    "AlertSendToEmailAddress": {
      "type": "string",
      "metadata": {
        "description": "Custom Email Address for alerts"
      },
      "defaultValue": null 
    },
    "BlockedFirewallConnectionsAlertEnabled": {
      "type": "bool",
      "metadata": {
        "description": "Sets the Enabled Flag for Database alert rule for connections blocked by the firewall"
      },
      "defaultValue": true
    },
    "BlockedFirewallConnectionsThreshold": {
      "type": "string",
      "metadata": {
        "description": "Number of Blocked Connections in the period to trigger the alert"
      },
      "defaultValue": "10"
    },
    "FailedConnectionsAlertEnabled": {
      "type": "bool",
      "metadata": {
        "description": "Sets the Enabled Flag for Database alert rule for failed connections "
      },
      "defaultValue": true
    },
    "FailedConnectionsThreshold": {
      "type": "string",
      "metadata": {
        "description": "Number of failed connections in the period to trigger the alert"
      },
      "defaultValue": "10"
    },
    "deployWebAppBlobLogs": {
      "type": "string",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Should the Web App Logging be deployed?  Requires a storage account and SAS to be configured if Yes"
      },
      "defaultValue": "No"
    }
  },
  "variables": {
    "standardPlanMaxAdditionalSlots": 4,
    "webAppPortalName": "[concat('ws-web-',parameters('baseResourceName'), '-Portal')]",
    "webAppOperatorPortalName": "[concat('ws-web-',parameters('baseResourceName'), '-Operator')]",
    "apiAppName": "[concat('ws-api-',parameters('baseResourceName'), '-API')]",
    "appServicePlanName": "[concat('asp-', parameters('baseResourceName'))]",
    "databaseName": "[concat('asq-', parameters('baseResourceName'))]",
    "databaseServerName": "[concat('svr', uniqueString(resourceGroup().id))]",
    "AAD TenantID": "[subscription().tenantId]",
    "storageAccountName": "[concat(uniqueString(resourceGroup().id),'storage')]",
    "storageAccountNameCustomer": "[concat(uniqueString(resourceGroup().id),'cbs')]",
    "storageEndpoint": "[concat('https://',variables('storageAccountName'),'.blob.core.windows.net')]",
    "customEmails": "[split(parameters('AlertSendToEmailAddress'), ',')]",
    "vaultName": "[concat('kv',parameters('baseResourceName'))]"
  },
  "resources": [
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ai-',parameters('baseResourceName'),'-CustomerSite')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "tags": {
          "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webAppPortalName'))]": "Resource",
          "displayName": "AppInsightsComponent"
      },
      "properties": {
          "applicationId": "[concat('ai-',parameters('baseResourceName'),'-CustomerSite')]"
      }
  },
  {
    "apiVersion": "2014-04-01",
    "name": "[concat('ai-',parameters('baseResourceName'),'-OperatorSite')]",
    "type": "Microsoft.Insights/components",
    "location": "[resourceGroup().location]",
    "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webAppOperatorPortalName'))]": "Resource",
        "displayName": "AppInsightsComponent"
    },
    "properties": {
        "applicationId": "[concat('ai-',parameters('baseResourceName'),'-OperatorSite')]"
    }
  },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ai-',parameters('baseResourceName'),'-Api')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "tags": {
          "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('apiAppName'))]": "Resource",
          "displayName": "AppInsightsComponent"
      },
      "properties": {
          "applicationId": "[concat('ai-',parameters('baseResourceName'),'-Api')]"
      }
},
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountname')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used to store diagnostics",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "tags": {
        "ObjectName": "[variables('storageAccountName')]"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountnameCustomer')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used to store Customer images",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "tags": {
        "ObjectName": "[variables('storageAccountNameCustomer')]"
      },
      "properties": {}
    },
       {
      "name": "[variables('databaseServerName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "apiVersion": "2014-04-01-preview",
      "properties": {
        "administratorLogin": "[parameters('sqlServerAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlServerAdminPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "name": "[variables('databaseName')]",
          "type": "databases",
          "location": "[resourceGroup().location]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[variables('databaseServerName')]"
          ],
          "properties": {
            "edition": "[parameters('sqlDatabaseEdition')]",
            "collation": "[parameters('sqlDatabaseCollation')]",
            "maxSizeBytes": "[parameters('sqlDatabaseMaxSizeBytes')]"
          },
          "resources": [
            {

              "comments": "Transparent Data Encryption",
              "name": "current",
              "type": "transparentDataEncryption",
              "apiVersion": "2014-04-01-preview",
              "properties": {
                "status": "[parameters('transparentDataEncryption')]"
              },
              "dependsOn": [
                "[variables('databaseName')]"
              ]
            }
          ]
        },
        {
          "apiVersion": "2015-05-01-preview",
          "type": "auditingSettings",
          "name": "Default",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('databaseServerName'))]",
            "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
          ],
          "properties": {
            "State": "Enabled",
            "storageEndpoint": "[variables('storageEndpoint')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]",
            "retentionDays": "[parameters('AuditRetentionPeriodInDays')]",
            "auditActionsAndGroups": null,
            "storageAccountSubscriptionId": "[subscription().subscriptionId]",
            "isStorageSecondaryKeyInUse": false
          }
        },
        {
            "type": "administrators",
            "name": "activeDirectory",
            "apiVersion": "2014-04-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "administratorType": "ActiveDirectory",
                "login": "[parameters('AAD Admin Login')]",
                "sid": "[parameters('AAD Admin ObjectID')]",
                "tenantId": "[variables('AAD TenantID')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Sql/servers/', variables('databaseServerName'))]"
            ]
        },
        {
          "type": "firewallrules",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[variables('databaseServerName')]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        }
      ]
    },       
    {
      "apiVersion": "2017-08-01",
      "type": "Microsoft.Web/serverfarms",
      "kind": "app",
      "name": "[variables('appServicePlanName')]",
      "location": "[resourceGroup().location]",
      "comments": "This app service plan is used for the web app and slots.",
      "tags": {
        "displayName": "AppServicePlan"
      },
      "properties": {},
      "dependsOn": [],
      "sku": {
        "name": "[if(lessOrEquals(length(parameters('environments')), variables('standardPlanMaxAdditionalSlots')), 'S1', 'P1')]"
      }
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "kind": "app",
      "name": "[variables('webAppPortalName')]",
      "location": "[resourceGroup().location]",
      "comments": "This is the web app, also the default 'nameless' slot.",
      "tags": {
        "displayName": "WebApp"
      },
      "identity": {
        "type": "SystemAssigned"
    },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(concat('microsoft.insights/components/',concat('ai-',parameters('baseResourceName'),'-CustomerSite'))).InstrumentationKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('microsoft.insights/components/', concat('ai-',parameters('baseResourceName'),'-CustomerSite'))]"
      ], "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "logs",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('webAppPortalName'))]"
          ],
          "properties": {
            "applicationLogs": {
              "fileSystem": {
                "level": "Warning"
              }
            },
            "httpLogs": {
              "fileSystem": {
                "retentionInMb": 40,
                "enabled": true
              }
            },
            "failedRequestsTracing": {
              "enabled": true
            },
            "detailedErrorMessages": {
              "enabled": false
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites/slots",
      "name": "[concat(variables('webAppPortalName'), '/', parameters('environments')[copyIndex()])]",
      "kind": "app",
      "location": "[resourceGroup().location]",
      "comments": "This specifies the web app slots.",
      "tags": {
        "displayName": "WebAppSlots"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('webAppPortalName'))]"
      ],
      "copy": {
        "name": "webPortalSlot",
        "count": "[length(parameters('environments'))]"
      }
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "kind": "app",
      "name": "[variables('webAppOperatorPortalName')]",
      "location": "[resourceGroup().location]",
      "comments": "This is the web app, also the default 'nameless' slot.",
      "tags": {
        "displayName": "OperatorApp"
      },
      "identity": {
        "type": "SystemAssigned"
    },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(concat('microsoft.insights/components/', concat('ai-',parameters('baseResourceName'),'-OperatorSite'))).InstrumentationKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('microsoft.insights/components/', concat('ai-',parameters('baseResourceName'),'-OperatorSite'))]"
      ], "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "logs",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('webAppOperatorPortalName'))]"
          ],
          "properties": {
            "applicationLogs": {
              "fileSystem": {
                "level": "Warning"
              }
            },
            "httpLogs": {
              "fileSystem": {
                "retentionInMb": 40,
                "enabled": true
              }
            },
            "failedRequestsTracing": {
              "enabled": true
            },
            "detailedErrorMessages": {
              "enabled": false
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites/slots",
      "name": "[concat(variables('webAppOperatorPortalName'), '/', parameters('environments')[copyIndex()])]",
      "kind": "app",
      "location": "[resourceGroup().location]",
      "comments": "This specifies the web app slots.",
      "tags": {
        "displayName": "WebAppSlots"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('webAppOperatorPortalName'))]"
      ],
      "copy": {
        "name": "webPortalSlot",
        "count": "[length(parameters('environments'))]"
      }
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "kind": "api",
      "name": "[variables('apiAppName')]",
      "location": "[resourceGroup().location]",
      "comments": "This is the web app, also the default 'nameless' slot.",
      "tags": {
        "displayName": "WebApp"
      },
      "identity": {
        "type": "SystemAssigned"
    },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(concat('microsoft.insights/components/', concat('ai-',parameters('baseResourceName'),'-Api'))).InstrumentationKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('microsoft.insights/components/', concat('ai-',parameters('baseResourceName'),'-Api'))]"
      ], "resources": [
      {
        "apiVersion": "2015-08-01",
        "name": "logs",
        "type": "config",
        "dependsOn": [
          "[resourceId('Microsoft.Web/Sites', variables('apiAppName'))]"
        ],
        "properties": {
          "applicationLogs": {
            "fileSystem": {
              "level": "Warning"
            }
          },
          "httpLogs": {
            "fileSystem": {
              "retentionInMb": 40,
              "enabled": true
            }
          },
          "failedRequestsTracing": {
            "enabled": true
          },
          "detailedErrorMessages": {
            "enabled": false
          }
        }
      }
    ]},
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites/slots",
      "name": "[concat(variables('apiAppName'), '/', parameters('environments')[copyIndex()])]",
      "kind": "api",
      "location": "[resourceGroup().location]",
      "comments": "This specifies the web app slots.",
      "tags": {
        "displayName": "Api"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('apiAppName'))]"
      ],
      "copy": {
        "name": "webPortalSlot",
        "count": "[length(parameters('environments'))]"
      }
    },
    {
      "name": "FirewallBlockedConnections",
      "type": "microsoft.insights/alertrules",
      "apiVersion": "2016-03-01",      
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('databaseName')]"
      ],
      "properties": {
        "name:": "FirewallBlockedConnections",
        "description": "Alerts on connection attempts blocked by the Firewall",
        "isEnabled": "[parameters('BlockedFirewallConnectionsAlertEnabled')]",
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[resourceId('Microsoft.Sql/servers/databases', variables('databaseServerName'), variables('databaseName'))]",
            "metricName": "blocked_by_firewall"
          },
          "operator": "GreaterThanOrEqual",
          "threshold": "[parameters('BlockedFirewallConnectionsThreshold')]",
          "windowSize": "[concat('PT',parameters('AlertWindowSizeInMinutes'),'M')]",
          "timeAggregation": "Average"
          },
          "actions": [
            {
              "$type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction, Microsoft.WindowsAzure.Management.Mon.Client",
              "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
              "sendToServiceOwners": "[parameters('AlertSendToServiceOwners')]",
              "customEmails": "[variables('customEmails')]"
            }
          ]
        },
        "resources": []
      },
      {
        "type": "Microsoft.Insights/alertRules",
        "name": "FailedDatabaseConnections",
        "dependsOn": [
          "[variables('databaseName')]"
        ],
        "location": "[resourceGroup().location]",
        "apiVersion": "2014-04-01",
        "properties": {
          "name:": "FailedDatabaseConnections",
          "description": "Alerts on failed connection attempts",
          "isEnabled": "[parameters('FailedConnectionsAlertEnabled')]",
          "condition": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
                "dataSource": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                    "resourceUri": "[resourceId('Microsoft.Sql/servers/databases', variables('databaseServerName'), variables('databaseName'))]",
                    "metricName": "connection_failed"
                },
                "operator": "GreaterThan",
                "threshold": "[parameters('FailedConnectionsThreshold')]",
                "windowSize": "[concat('PT',parameters('AlertWindowSizeInMinutes'),'M')]"
            },
            "actions": [
              {
                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
                "sendToServiceOwners": "[parameters('AlertSendToServiceOwners')]",
                "customEmails": "[variables('customEmails')]"
              }
            ]
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('vaultName')]",
      "apiVersion": "2015-06-01",
      "location": "[resourceGroup().location]",
      "properties": {
          "tenantId": "[reference(concat('Microsoft.Web/sites/', variables('webAppPortalName')), '2016-08-01', 'Full').identity.tenantId]",
          "accessPolicies": [
              {
                  "tenantId": "[reference(concat('Microsoft.Web/sites/', variables('webAppPortalName')), '2016-08-01', 'Full').identity.tenantId]",
                  "objectId": "[reference(concat('Microsoft.Web/sites/', variables('webAppPortalName')), '2016-08-01', 'Full').identity.principalId]",
                  "permissions": {
                      "keys": [
                          "get"
                      ],
                      "secrets": [
                          "get"
                      ]
                  }
              }
          ],
          "sku": {
              "family": "A",
              "name": "Standard"
          }
      },
      "resources": [
          {
              "type": "secrets",
              "name": "blobkey",
              "apiVersion": "2015-06-01",
              "properties": {
                  "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameCustomer')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
              },
              "dependsOn": [
                  "[concat('Microsoft.KeyVault/vaults/', variables('vaultName'))]"
              ]
          }
      ]
  }
  ]
}